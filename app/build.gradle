apply plugin: 'com.android.application'

apply plugin: 'kotlin-android'

apply plugin: 'kotlin-android-extensions'

apply plugin: 'kotlin-kapt'

apply plugin: 'androidx.navigation.safeargs.kotlin'

androidExtensions {
    experimental = true
}

android {
    compileSdkVersion rootProject.ext.compileSdkVersion
    defaultConfig {
        applicationId "com.sample.android.cafebazaar"
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode 1
        versionName "1.0"
        buildConfigField "String", "FOURSQUARE_BASE_URL", "\"https://api.foursquare.com/\""
        buildConfigField "String", "FOURSQUARE_CLIENT_ID", "\"${getProperty("local.properties", "foursquare_client_id")}\""
        buildConfigField "String", "FOURSQUARE_CLIENT_SECRET", "\"${getProperty("local.properties", "foursquare_client_secret")}\""
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    dataBinding {
        enabled = true
    }

    buildFeatures {
        compose = true
    }
    composeOptions {
        kotlinCompilerExtensionVersion = version_compose
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_1_8.toString()
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    // Support libraries
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$version_kotlin"
    implementation "androidx.appcompat:appcompat:$version_support"
    implementation "com.google.android.material:material:$version_material"
    implementation "androidx.constraintlayout:constraintlayout:$version_constraint_layout"
    implementation "androidx.room:room-runtime:$version_room"
    kapt  "androidx.room:room-compiler:$version_room"
    implementation "androidx.test.espresso:espresso-idling-resource:$version_espresso"

    // Android KTX
    implementation "androidx.core:core-ktx:$version_core"

    // Navigation
    implementation "androidx.navigation:navigation-fragment-ktx:$version_navigation"

    // Architecture components
    implementation "androidx.lifecycle:lifecycle-extensions:$version_lifecycle_extensions"

    // Retrofit
    implementation "com.squareup.retrofit2:retrofit:$version_retrofit"
    implementation "com.squareup.retrofit2:converter-moshi:$version_retrofit"
    implementation "com.squareup.retrofit2:adapter-rxjava2:$version_retrofit"

    // Dagger
    implementation "com.google.dagger:dagger:$version_dagger"
    kapt "com.google.dagger:dagger-compiler:$version_dagger"
    implementation "com.google.dagger:dagger-android:$version_dagger"
    implementation "com.google.dagger:dagger-android-support:$version_dagger"
    kapt "com.google.dagger:dagger-android-processor:$version_dagger"

    // coroutines
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:$version_coroutines"

    // Jetpack compose
    implementation "androidx.compose.ui:ui:${version_compose}"
    implementation "androidx.compose.material:material:${version_compose}"
    implementation "androidx.activity:activity-compose:${version_activity_compose}"

    // Network
    implementation "com.squareup.okhttp3:logging-interceptor:$version_okhttp"
    implementation "com.squareup.picasso:picasso:$version_picasso"

    // Moshi for parsing the JSON format
    implementation "com.squareup.moshi:moshi:$version_moshi"
    implementation "com.squareup.moshi:moshi-kotlin:$version_moshi"

    //Android RX
    implementation "io.reactivex.rxjava2:rxjava:$version_rxjava"
    implementation "io.reactivex.rxjava2:rxandroid:$version_rxandroid"

    // Timber
    implementation "com.jakewharton.timber:timber:$version_timber"

    // Dependencies for local unit tests
    testImplementation "org.mockito:mockito-core:$version_mockito"

    // Dependencies for Instrumentation tests
    androidTestImplementation "androidx.test.ext:junit:$version_junit_ext"

    // Espresso UI Testing
    androidTestImplementation "androidx.test.espresso:espresso-core:$version_espresso"
    androidTestImplementation "androidx.test.espresso:espresso-contrib:$version_espresso"

    // Android Testing Support Library's runner and rules
    androidTestImplementation "androidx.test:runner:$version_runner"
    androidTestImplementation  "androidx.test:rules:$version_rules"
}

def getProperty(String filename, String propName) {
    def propsFile = rootProject.file(filename)
    if (propsFile.exists()) {
        def props = new Properties()
        props.load(new FileInputStream(propsFile))
        if (props[propName] != null) {
            return props[propName]
        } else {
            print("No such property " + propName + " in file " + filename)
        }
    } else {
        print(filename + " does not exist!")
    }
}
